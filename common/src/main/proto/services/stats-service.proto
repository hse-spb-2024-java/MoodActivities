syntax = "proto3";

option java_package = "org.hse.moodactivities.common.proto.services";
option java_multiple_files = true;

package services;

import "requests/stats-service/all-day-request.proto";
import "requests/stats-service/top-list-request.proto";
import "requests/stats-service/days-mood-request.proto";
import "requests/stats-service/full-report-request.proto";
import "requests/stats-service/users-mood-request.proto";
import "requests/stats-service/weekly-report-request.proto";
import "requests/stats-service/mood-for–the-month-request.proto";
import "requests/stats-service/weather-stats-request.proto";
import "requests/stats-service/weather-gpt-request.proto";
import "requests/stats-service/ai-request.proto";

import "responses/stats-service/all-day-response.proto";
import "responses/stats-service/top-list-response.proto";
import "responses/stats-service/days-mood-response.proto";
import "responses/stats-service/full-report-response.proto";
import "responses/stats-service/users-mood-response.proto";
import "responses/stats-service/weekly-report-response.proto";
import "responses/stats-service/mood-for–the-month-response.proto";
import "responses/stats-service/weather-stats-response.proto";
import "responses/stats-service/weather-gpt-response.proto";
import "responses/stats-service/ai-response.proto";

import "defaults/empty.proto";

service StatsService {
  rpc AllDayReport(requests.AllDayRequest) returns (responses.AllDayResponse) {}
  rpc GetFullReport(requests.FullReportRequest) returns (responses.FullReportResponse) {}
  rpc GetDaysMood(requests.DaysMoodRequest) returns (responses.DaysMoodResponse) {}
  rpc GetTopList(requests.TopListRequest) returns (responses.TopListResponse) {}
  rpc GetUsersMood(requests.UsersMoodRequest) returns (responses.UsersMoodResponse) {}
  rpc GetWeeklyReport(requests.WeeklyReportRequest) returns (responses.WeeklyReportResponse) {}
  rpc GetMoodForTheMonth(requests.MoodForTheMonthRequest) returns (responses.MoodForTheMonthResponse) {}
  rpc GetWeatherStats(requests.WeatherStatsRequest) returns (responses.WeatherStatsResponse) {}
  rpc GetWeatherGTP(requests.WeatherGptRequest) returns (responses.WeatherGptResponse) {}
  rpc GetAiAnalytics(requests.AiRequest) returns (responses.AiResponse) {}
}
